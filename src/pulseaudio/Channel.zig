const std = @import("std");
const c = @cImport({
    @cInclude("pulse/pulseaudio.h");
});

const Channel = @This();

pub const Position = enum(i8) {
    INVALID = c.PA_CHANNEL_POSITION_INVALID,
    MONO = c.PA_CHANNEL_POSITION_MONO,
    FRONT_LEFT = c.PA_CHANNEL_POSITION_FRONT_LEFT,
    FRONT_RIGHT = c.PA_CHANNEL_POSITION_FRONT_RIGHT,
    FRONT_CENTER = c.PA_CHANNEL_POSITION_FRONT_CENTER,
    REAR_CENTER = c.PA_CHANNEL_POSITION_REAR_CENTER,
    REAR_LEFT = c.PA_CHANNEL_POSITION_REAR_LEFT,
    REAR_RIGHT = c.PA_CHANNEL_POSITION_REAR_RIGHT,
    SUBWOOFER = c.PA_CHANNEL_POSITION_SUBWOOFER,
    FRONT_LEFT_OF_CENTER = c.PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER,
    FRONT_RIGHT_OF_CENTER = c.PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER,
    SIDE_LEFT = c.PA_CHANNEL_POSITION_SIDE_LEFT,
    SIDE_RIGHT = c.PA_CHANNEL_POSITION_SIDE_RIGHT,
    AUX0 = c.PA_CHANNEL_POSITION_AUX0,
    AUX1 = c.PA_CHANNEL_POSITION_AUX1,
    AUX2 = c.PA_CHANNEL_POSITION_AUX2,
    AUX3 = c.PA_CHANNEL_POSITION_AUX3,
    AUX4 = c.PA_CHANNEL_POSITION_AUX4,
    AUX5 = c.PA_CHANNEL_POSITION_AUX5,
    AUX6 = c.PA_CHANNEL_POSITION_AUX6,
    AUX7 = c.PA_CHANNEL_POSITION_AUX7,
    AUX8 = c.PA_CHANNEL_POSITION_AUX8,
    AUX9 = c.PA_CHANNEL_POSITION_AUX9,
    AUX10 = c.PA_CHANNEL_POSITION_AUX10,
    AUX11 = c.PA_CHANNEL_POSITION_AUX11,
    AUX12 = c.PA_CHANNEL_POSITION_AUX12,
    AUX13 = c.PA_CHANNEL_POSITION_AUX13,
    AUX14 = c.PA_CHANNEL_POSITION_AUX14,
    AUX15 = c.PA_CHANNEL_POSITION_AUX15,
    AUX16 = c.PA_CHANNEL_POSITION_AUX16,
    AUX17 = c.PA_CHANNEL_POSITION_AUX17,
    AUX18 = c.PA_CHANNEL_POSITION_AUX18,
    AUX19 = c.PA_CHANNEL_POSITION_AUX19,
    AUX20 = c.PA_CHANNEL_POSITION_AUX20,
    AUX21 = c.PA_CHANNEL_POSITION_AUX21,
    AUX22 = c.PA_CHANNEL_POSITION_AUX22,
    AUX23 = c.PA_CHANNEL_POSITION_AUX23,
    AUX24 = c.PA_CHANNEL_POSITION_AUX24,
    AUX25 = c.PA_CHANNEL_POSITION_AUX25,
    AUX26 = c.PA_CHANNEL_POSITION_AUX26,
    AUX27 = c.PA_CHANNEL_POSITION_AUX27,
    AUX28 = c.PA_CHANNEL_POSITION_AUX28,
    AUX29 = c.PA_CHANNEL_POSITION_AUX29,
    AUX30 = c.PA_CHANNEL_POSITION_AUX30,
    AUX31 = c.PA_CHANNEL_POSITION_AUX31,
    TOP_CENTER = c.PA_CHANNEL_POSITION_TOP_CENTER,
    TOP_FRONT_LEFT = c.PA_CHANNEL_POSITION_TOP_FRONT_LEFT,
    TOP_FRONT_RIGHT = c.PA_CHANNEL_POSITION_TOP_FRONT_RIGHT,
    TOP_FRONT_CENTER = c.PA_CHANNEL_POSITION_TOP_FRONT_CENTER,
    TOP_REAR_LEFT = c.PA_CHANNEL_POSITION_TOP_REAR_LEFT,
    TOP_REAR_RIGHT = c.PA_CHANNEL_POSITION_TOP_REAR_RIGHT,
    TOP_REAR_CENTER = c.PA_CHANNEL_POSITION_TOP_REAR_CENTER,
    MAX = c.PA_CHANNEL_POSITION_MAX,

    pub fn pulseName(self: Position) []const u8 {
        switch (self) {
            .FRONT_LEFT => return "front-left",
            .FRONT_RIGHT => return "front-right",
            .FRONT_CENTER => return "front-center",
            .REAR_CENTER => return "rear-center",
            .REAR_LEFT => return "rear-left",
            .REAR_RIGHT => return "rear-right",
            else => return "",
        }
    }
};

pub const Map = struct {
    const Self = @This();

    len: usize,
    map: [32]Position,

    pub fn init(info: c.pa_channel_map) Self {
        var m = [_]Position{Position.INVALID} ** 32;

        for (0..info.channels) |i| {
            m[i] = @enumFromInt(info.map[i]);
        }

        return Self{
            .len = info.channels,
            .map = m,
        };
    }
};
